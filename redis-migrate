#!/bin/bash

######
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
######

######
###     Migrates the keys responding to the pattern specified on the command line, using DUMP/RESTORE, supports authentication differently from MIGRATE
######

KEYS_MATCHER=$1
SOURCE_HOST=10.10.5.200
SOURCE_PASSWORD=1
SOURCE_PORT=6379
SOURCE_SCHEMA=0
TARGET_HOST=10.10.5.105
TARGET_PASSWORD=1
TARGET_PORT=6379
TARGET_SCHEMA=0
LOG_FILE="migrate.log"

if [[ -z "$KEYS_MATCHER" ]]; then
        echo -e "Please provide a KEYS matcher, like *~cache"
        exit 1
fi

echo "***       Migrating keys matching $KEYS_MATCHER"


redis-cli -h $SOURCE_HOST -a $SOURCE_PASSWORD -p $SOURCE_PORT keys $KEYS_MATCHER | while read key; do
        # Preparing TTL
        #key_ttl=`redis-cli -a $SOURCE_PASSWORD -p $SOURCE_PORT ttl "$key"`
        #if [[ $key_ttl -lt 1 ]]; then
                key_ttl=0
        #fi

        echo "Dump/Restore \"$key\", ttl $key_ttl" &>> $LOG_FILE
        echo "Dump/Restore \"${key:1}\", ttl $key_ttl"

        #key_ttl+="000" # TTL must be in milliseconds when specifying it
        redis-cli --raw -h $SOURCE_HOST -p $SOURCE_PORT -n $SOURCE_SCHEMA -a $SOURCE_PASSWORD DUMP "$key" | head -c -1 | redis-cli -x -h $TARGET_HOST -p $TARGET_PORT -n $TARGET_SCHEMA -a $TARGET_PASSWORD RESTORE "${key:1}" 0 &>> $LOG_FILE
done
